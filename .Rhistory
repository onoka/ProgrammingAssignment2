d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSITXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- striptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time( > t1)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
q()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plamts)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = "Speed", y = cars$dist)
plot(x = cars$dist, y = cars$speed, xlabel = "Speed")
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars[2])
plot(cars, col = 2)
plot(cars, xlim= c(10, 15))
plot(cars, pch = 2)
data(mtcars)
play()
str(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(formular = mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
tail(iris)
tapply(iris$sepal.length, iris$species, mean)
virginicia <- iris$species["virginica"]
virginicia
lapply(iris, class)
flag <- iris[ "virginica"]
debug(ls)
ls()
jj
ls
library(datasets)
data(iris)
?iris
library(swirl)
ls()
rm(list=ls)
rm(list=ls())
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
reamainder(4, div = 2)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
eavluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
evaluate(x){x[1],c(8, 4, 0)}
evaluate(function(x){x[1],c(8, 4, 0)}
evaluate(function(x){x[lenth(x)],c(8, 4, 0)}
evaluate(function(x){x[lenth(x)], c(8, 4, 0)}
evaluate(function(x){x[lenth(x)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[lenth(x)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
info()
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
q()
library(swirl)
ls
ls()
rm(list=ls())
swirl()
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
info()
skip()
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("no!")
submit()
med_lib(place = "nairobi", adjective = "u.o.n", noun = "lights")
mad_lib(place = "nairobi", adjective = "u.o.n", noun = "lights")
mad_libs(place = "nairobi", adjective = "u.o.n", noun = "lights")
submit()
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(csl+list)
class(csl_list)
class(cls_list)
as.character(cls_list)
cls_vact <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flags_shapes <- flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(5, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lappy(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
str(flags)
summary(flags)
sapply(flags, unique)
info()
play()
library(datasets)
data(iris)
?iris
mean(Sepal.Length$virginica)
str(iris)
mean(Sepal.Length$virginica)
dim(iris)
Sepel.length$virginica
Sepal.length$virginica
summary(iris)
mean(iris$Sepal.Length)
summary(iris$virginica)
tail(iris)
nxt()
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
play()
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$species)
tapply(iris$Sepal.Length, iris$species, mean)
table(iris$Sepal.Length)
table(iris$sepecies)
table(iris$species)
nxt()
info()
main()
play()
library(datasets)
data(mtcars)
summary(mtcars)
head(mtcars)
library(swirl)
install_from_swirl("Open Intro")
library(swirl)
install_from_swirl("Open Intro")
library(swirl)
install_from_swirl("Open Intro")
summary(mtcars)9
swirl()
?InstallCourses
library(swirl)
swirl()
getwd()
install.packages(c("JGR","Deducer","DeducerExtras"))
library(JGR)
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("XLConnect", type="source")
library(JGR)
JGR()
q()
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
agrgs(list.files())
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exist()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
file.path('dir.create("testdir2")', 'dir.create("testdir3")')
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive = TRUE)
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x)
class(x[[1]])
x <- 1:4
y <- 2
x + y
class(x + y)
x <- c(3, 5, 1, 10, 12, 6)
x[x == 0] <- 6
library(datasets)
data(iris)
?iris
mean(Sepal.Length$virginica)
str(iris)
head(iris)
mean(Sepal.Length)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length[virinica])
debug(ls)
debug(ls)
tail(iris)
subsetdata <- subset(iris$Sepal.Length, iris$Species==virginica)
subsetdata <- subset(iris$Sepal.Length, iris$Species=='virginica')
subsetdata
mean(subsetdata)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
mean(iris$Petal.Width)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
ls
?ls
debug(ls)
?debug
?debug(ls)
debug(ls)
ls
ls
debug(ls)
ls
debug(ls)
ls
search()
ls()
install.packages(c("BH", "boot", "caret", "class", "cluster", "codetools", "crayon", "dplyr", "e1071", "foreign", "gridExtra", "gtools", "httr", "KernSmooth", "lattice", "lme4", "manipulate", "MASS", "Matrix", "mosaic", "nlme", "nnet", "plyr", "R6", "RcppEigen", "RCurl", "rmarkdown", "rpart", "rversions", "scales", "spatial", "stringi", "survival", "XML"))
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(sd, c(1,4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9,
8.8)
)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){length(x)}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("you!")
submit()
mad_libs(place = nairobi, adjective = "nairobi")
mad_libs(place = "nairobi", adjective = "nairobi", noun = "electricity")
mad_libs(place = "nairobi", adjective = "nairobi", noun = "electricity")
submit()
submit()
'I'%p%'love'%p%'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cla_vect <- sapply(flags, class)
cls_vect
cls_vect()
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapplly(flags, unique)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,  class)
vapply(flags, clss, character(1))
ok()
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
Play()
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
getwd()
setwd("D:/r prog cert")
ls()
files.list()
file.list()
list.files()
setwd("C:/Users/Lydia/Desktop/cousera/ProgrammingAssignment2")
ls()
makeCacheMatrix <- function(x = matrix()) {
## i contains the NULL
i <- NULL
##makeCacheMatrix has 4 functions; get, set, getinverse, setinverse
##set function changes the matrix stored in the main function
set <- function(y){
x <<- y
i <<- NULL
}
## get function returns the matrix stored inthe main function
get <- function() x
##setinverse store the value of the input in a variable i into the main function
setinverse <- function(inv) i <<- inv
##getinverse store the value of the input in a variable i and return it
getinverse <- function() i
##make a list of all the stored functions inthe main function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
